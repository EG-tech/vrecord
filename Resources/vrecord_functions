# these functions are appended to an include file that is sent to gtkdialog and allows for functions to be used within gtkdialog actions

# list of selections for each vrecord option
DECKLINK_UTILITIES=("ffmpeg" "bmdcapture")
VIDEO_INPUT_OPTIONS=("Composite" "SDI" "Component" "S-Video")
AUDIO_INPUT_OPTIONS=("Analog" "SDI Embedded Audio" "Digital Audio (AES/EBU)")
CONTAINER_OPTIONS=("QuickTime" "Matroska" "AVI" "MXF" "MP4")
VIDEO_CODEC_OPTIONS=("Uncompressed Video" "FFV1 version 3" "JPEG2000" "ProRes" "ProRes (HQ)" "h264" "HuffYUV")
FFV1_SLICE_OPTIONS=("4" "6" "9" "12" "16" "24" "30")
AUDIO_CODEC_OPTIONS=("24-bit PCM" "24-bit FLAC" "AAC")
AUDIO_CHANNEL_CHOICE_OPTIONS=("Mono" "Stereo")
AUDIO_MODE_SR_CHOICE_OPTIONS=("96 kHz" "48 kHz" "44.1 kHz")
VIDEO_BITDEPTH_OPTIONS=("10 bit" "8 bit")
CHANNEL_MAPPING_OPTIONS=("2 Stereo Tracks (Channels 1 & 2 -> 1st Track Stereo, Channels 3 & 4 -> 2nd Track Stereo)" "1 Stereo Track (From Channels 1 & 2)" "1 Stereo Track (From Channels 3 & 4)" "Channel 1 -> 1st Track Mono, Channel 2 -> 2nd Track Mono" "Channel 2 -> 1st Track Mono, Channel 1 -> 2nd Track Mono" "Channel 1 -> Single Track Mono" "Channel 2 -> Single Track Mono")
TIMECODE_OPTIONS=("none" "rp188vitc" "rp188vitc2" "rp188ltc" "rp188any" "vitc" "vitc2" "serial")
STANDARD_OPTIONS=("NTSC" "PAL")
QCTOOLSXML_OPTIONS=("Yes, after recording" "Yes, concurrent with recording" "No")
FRAMEMD5_OPTIONS=("Yes" "No")
EMBED_LOGS_OPTIONS=("Yes" "No")
PLAYBACKVIEW_OPTIONS=("Unfiltered" "Quality Control View (mpv)" "Broadcast Range Visual" "Full Range Visual" "Visual + Numerical" "Color Matrix" "Bit Planes")
PLAYBACKVIEW_PASS_OPTIONS=("Unfiltered" "Quality Control View (mpv)" "Broadcast Range Visual" "Audio + Video" "Full Range Visual" "Visual + Numerical" "Color Matrix" "Bit Planes")

# functions
_get_iso8601(){
    date +%FT%T
}

_report(){
    local RED="$(tput setaf 1)"    # Red      - For Warnings
    local GREEN="$(tput setaf 2)"  # Green    - For Declarations
    local BLUE="$(tput setaf 4)"   # Blue     - For Questions
    local NC="$(tput sgr0)"        # No Color
    local COLOR=""
    local STARTMESSAGE=""
    local ECHOOPT=""
    OPTIND=1
    while getopts "qdwstn" opt ; do
        case "${opt}" in
            q) COLOR="${BLUE}" ;;                        # question mode, use color blue
            d) COLOR="${GREEN}" ;;                       # declaration mode, use color green
            w) COLOR="${RED}" ;;                         # warning mode, use color red
            s) STARTMESSAGE+=([${SCRIPTNAME}] ) ;;       # prepend scriptname to the message
            t) STARTMESSAGE+=($(_get_iso8601) '- ' ) ;;  # prepend timestamp to the message
            n) ECHOOPT="-n" ;;                           # to avoid line breaks after echo
        esac
    done
    shift "$((OPTIND-1))"
    MESSAGE="${1}"
    echo ${ECHOOPT} "${COLOR}${STARTMESSAGE[@]}${MESSAGE}${NC}"
}

_report_unexpected_error(){
    ERROR_VAR_NAME="${1}"
    ERROR_VAR_VALUE="${!1}"
    ERROR_DETAIL="$2"
    _report -d -wt "vrecord exited a form in an unexpected way (${ERROR_VAR_NAME}=${ERROR_VAR_VALUE}), please report this error to https://github.com/amiaopensource/vrecord/issues"
    if [[ -n "${ERROR_DETAIL}" ]] ;then
        _report -d -wt "Error details: ${ERROR_DETAIL}"
    fi
    if [[ -f "${INGESTLOG}" ]] ; then
        _writeingestlog "vrecord command Error" "invalid ${ERROR_VAR_NAME} value of ${ERROR_VAR_VALUE}"
    fi
    exit 1
}

_cleanup(){
    _report -wt "Vrecord is being stopped at $(_get_iso8601), noting this in the capture log."
    _writeingestlog "exit status" "vrecord was forced to quit early at $(_get_iso8601). Some processing may be incomplete."
}

_check_mpv(){
    if ! mpv > /dev/null ; then
        mpv
        _report -wt "mpv doesn't appear to be running correctly. Try 'brew reinstall mpv'."
        exit 1
    fi
}

_check_ffmpeg_install(){
    echo "Using ffmpeg at ${FFMPEG_BIN}"
    echo
    if [ ! -f "${FFMPEG_BIN}" ] ; then
        echo "${FFMPEG_BIN} is not found. Please install ffmpegdecklink via:"
        echo "    brew install amiaopensource/amiaos/ffmpegdecklink"
        echo "Or install a version of ffmpeg that is compiled with decklink support if you wish to use that input."
        echo
    fi
    if [ ! -f "${FFPLAY_BIN}" ] ; then
        echo "${FFPLAY_BIN} is not found."
        echo
    fi
    if [ ! -f "${FFPROBE_BIN}" ] ; then
        echo "${FFPROBE_BIN} is not found."
        echo
    fi
    echo
    FFMPEG_V="$("${FFMPEG_BIN}" -version 2>&1)"
    echo "FFmpeg configuration: ${FFMPEG_V}"
    echo
    if [ "$(echo "${FFMPEG_V}" | grep "Library not loaded" >/dev/null)" ] ; then
        echo "Please reinstall 'ffmpegdecklink':"
        echo "    brew reinstall amiaopensource/amiaos/ffmpegdecklink"
        echo "Or install a version of ffmpeg that is compiled with decklink support if you wish to use that input."
        echo "Exiting."
        exit 1
    fi
    if [ -z "$("${FFMPEG_BIN}" -nostdin -v 0 -sources decklink)" ] ; then
        echo "vrecord is set to use a decklink input but ${FFMPEG_BIN} does not appear to support decklink inputs."
        echo "Please review installation and troubleshooting information for vrecord or install ffmpegdecklink."
        exit 1
    fi
}

_update_config_file(){
    # write config file
    {
        echo "# Set these variables to a valid option or leave as empty quotes (like \"\") to request each run."
        echo "DEVICE_INPUT_CHOICE=\"${DEVICE_INPUT_CHOICE}\""
        echo "VIDEO_INPUT_CHOICE=\"${VIDEO_INPUT_CHOICE}\""
        echo "AUDIO_INPUT_CHOICE=\"${AUDIO_INPUT_CHOICE}\""
        echo "CONTAINER_CHOICE=\"${CONTAINER_CHOICE}\""
        echo "VIDEO_CODEC_CHOICE=\"${VIDEO_CODEC_CHOICE}\""
        echo "FFV1_SLICE_CHOICE=\"${FFV1_SLICE_CHOICE}\""
        echo "AUDIO_CODEC_CHOICE=\"${AUDIO_CODEC_CHOICE}\""
        echo "AUDIO_DEV_CHOICE=\"${AUDIO_DEV_CHOICE}\""
        echo "AUDIO_MODE_CODEC_CHOICE=\"${AUDIO_MODE_CODEC_CHOICE}\""
        echo "AUDIO_CHANNEL_CHOICE=\"${AUDIO_CHANNEL_CHOICE}\""
        echo "AUDIO_MODE_SR_CHOICE=\"${AUDIO_MODE_SR_CHOICE}\""
        echo "VIDEO_BIT_DEPTH_CHOICE=\"${VIDEO_BIT_DEPTH_CHOICE}\""
        echo "AUDIO_MAPPING_CHOICE=\"${AUDIO_MAPPING_CHOICE}\""
        echo "TIMECODE_CHOICE=\"${TIMECODE_CHOICE}\""
        echo "STANDARD_CHOICE=\"${STANDARD_CHOICE}\""
        echo "QCTOOLSXML_CHOICE=\"${QCTOOLSXML_CHOICE}\""
        echo "FRAMEMD5_CHOICE=\"${FRAMEMD5_CHOICE}\""
        echo "EMBED_LOGS_CHOICE=\"${EMBED_LOGS_CHOICE}\""
        echo "PLAYBACKVIEW_CHOICE=\"${PLAYBACKVIEW_CHOICE}\""
        echo "PLAYBACKVIEW_CHOICE_PASS=\"${PLAYBACKVIEW_CHOICE_PASS}\""
        echo "DIR=\"${DIR}\""
        echo "LOGDIR=\"${LOGDIR}\""
        echo "INVERT_PHASE=\"${INVERT_PHASE}\""
        echo "DURATION=\"${DURATION}\""
        echo "PREFIX=\"${PREFIX}\""
        echo "USER_SUFFIX=\"${USER_SUFFIX}\""
        echo "NO_SUFFIX=\"${NO_SUFFIX}\""
        echo "TECHNICIAN=\"${TECHNICIAN}\""
        echo "AVFCTL_INPUT_CHOICE=\"${AVFCTL_INPUT_CHOICE}\""
        echo "DECKLINK_INPUT_CHOICE=\"${DECKLINK_INPUT_CHOICE}\""
        echo "DECKLINK_UTILITY_CHOICE=\"${DECKLINK_UTILITY_CHOICE}\""
    } > "${CONFIG_FILE}"
    . "${CONFIG_FILE}"
}

_validate_form(){
    if [ "${INVERT_PHASE}" = "true" ] ; then
        echo "WARNING: Option to invert phase of second audio channel has been selected.\n"
    fi
    if [ "${VIDEO_CODEC_CHOICE}" = "FFV1 version 3" ] && [ "${CONTAINER_CHOICE}" = "MXF" ] ; then
        echo "ERROR: Incompatible video codecs and containers have been selected.\n"
    elif [ "${AUDIO_CODEC_CHOICE}" = "24-bit FLAC" ] && [ "${CONTAINER_CHOICE}" = "QuickTime" ] ; then
        echo "ERROR: Incompatible audio codecs and containers have been selected.\n"
    fi
    if [ ! -d "${DIR}" ] ; then
        echo "ERROR: The recording directory (${DIR}) does not exist. Create this folder please.\n"
    fi
    if [ ! -d "${LOGDIR}" ] && [ -n "${LOGDIR}" ] ; then
        echo "ERROR: The auxiliary directory (${LOGDIR}) does not exist. Create this folder or leave blank to use the recording directory.\n"
    fi
    # validate duration
    if [ -n "${DURATION}" ] ; then
        if ! [ "$(echo "${DURATION} > 0" | bc)" = "1" ] ; then
            echo "ERROR: Illegal value for recording time. The duration must be a positive number.\n"
        fi
    fi
}

_get_output_filename(){
    # Get user suffix preference of default per video codec
    if [ "${NO_SUFFIX}" = 'true' ] ; then
        SUFFIX=""
    elif [ -n "${USER_SUFFIX}" ] ; then
        SUFFIX="${USER_SUFFIX}"
    elif [ "${DEVICE_INPUT_CHOICE}" = "0" ] ; then
        case "${VIDEO_CODEC_CHOICE}" in
            "FFV1 version 3")   SUFFIX="_ffv1" ;;
            "JPEG2000")         SUFFIX="_j2k" ;;
            "ProRes")           SUFFIX="_prores" ;;
            "ProRes (HQ)")      SUFFIX="_prores" ;;
            "h264")             SUFFIX="" ;;
            "HuffYUV")          SUFFIX="_huff" ;;
        esac
    fi

    # Get extension by container choice
    if [ "${DEVICE_INPUT_CHOICE}" = "0" ] ; then
        case "${CONTAINER_CHOICE}" in
            "Matroska")             EXTENSION="mkv" ;;
            "QuickTime")            EXTENSION="mov" ;;
            "AVI")                  EXTENSION="avi" ;;
            "MXF")                  EXTENSION="mxf" ;;
            "MP4")                  EXTENSION="mp4" ;;
        esac
    elif [ "${DEVICE_INPUT_CHOICE}" = "1" ] ; then
        EXTENSION="dv"
    elif [ "${DEVICE_INPUT_CHOICE}" = "2" ] ; then
        case "${AUDIO_MODE_CODEC_CHOICE}" in
            "24-bit PCM")           EXTENSION="wav" ;;
            "24-bit FLAC")          EXTENSION="flac" ;;
        esac
    fi

    echo "${DIR}/${PREFIX}${ID}${SUFFIX}.${EXTENSION}"
}

_setup_vrecord_process(){
    _review_all_options
    _set_ffplay_options(){
        FFPLAY_OPTIONS=(-v info)
        FFPLAY_OPTIONS+=(-hide_banner)
        FFPLAY_OPTIONS+=(-stats)
        FFPLAY_OPTIONS+=(-autoexit)
        if [[ "${RUNTYPE}" = "passthrough" ]] ; then
            FFPLAY_OPTIONS+=("${GRAB_INPUT[@]}")
        else
            FFPLAY_OPTIONS+=(-i -)
        fi
        FFPLAY_OPTIONS+=(-window_title "${WINDOW_NAME}")
        if [[ "${DEVICE_INPUT_CHOICE}" = "0" ]] && [[ ! -z "${PLAYBACKFILTER}" ]] ; then
            FFPLAY_OPTIONS+=(-vf "${PLAYBACKFILTER}")
        fi
        FFPLAY_OPTIONS+=(-af "channelmap=0|1:stereo")
    }
    if [[ "${DEVICE_INPUT_CHOICE}" = 0 ]] ; then
        # DEVICE_INPUT_CHOICE=0 is decklink, other DEVICE_INPUT_CHOICE values don't yet use such filtering
        if [[ "${DECKLINK_UTILITY_CHOICE}" == "bmdcapture" ]] ; then
            VRECORD_STEPS="3"
            RECORD_COMMAND=(bmdcapture)
            # TO DO adjust TIME_LIMIT for bmdcapture
            RECORD_COMMAND+=("${GRAB_INPUT[@]}")
            FF_RECORD_COMMAND=("${FFMPEG_BIN}" -nostdin -nostats "${TIME_LIMIT[@]}")
            FF_RECORD_COMMAND+=(-i -)
            if [[ -n "${VIDEOCODECNAME}" ]] ; then
                MIDDLEOPTIONS+=(-metadata:s:v:0 encoder="${VIDEOCODECNAME}")
            fi
            FF_RECORD_COMMAND+=("${MIDDLEOPTIONS[@]}")
            FF_RECORD_COMMAND+=(-filter_complex "[0:v:0]${RECORDINGFILTER}${TC_WRITE};${AUDIOMAP}" "${AUDIO_CHANNEL_MAP[@]}")
            FF_RECORD_COMMAND+=(-f "${FORMAT}" "${VRECORD_OUTPUT}")
            FF_RECORD_COMMAND+=("${EXTRAOUTPUTS[@]}")
            FF_RECORD_COMMAND+=(-filter_complex "${AUDIOMAP}" "${AUDIO_CHANNEL_MAP[@]}" "${PIPE_OUTPUT[@]}")
        else
            VRECORD_STEPS="2"
            RECORD_COMMAND=("${FFMPEG_BIN}")
            RECORD_COMMAND+=(-nostdin -nostats "${TIME_LIMIT[@]}" "${GRAB_INPUT[@]}")
            if [[ -n "${VIDEOCODECNAME}" ]] ; then
                MIDDLEOPTIONS+=(-metadata:s:v:0 encoder="${VIDEOCODECNAME}")
            fi
            RECORD_COMMAND+=("${MIDDLEOPTIONS[@]}")
            RECORD_COMMAND+=(-filter_complex "[0:v:0]${RECORDINGFILTER}${TC_WRITE};${AUDIOMAP}" "${AUDIO_CHANNEL_MAP[@]}")
            RECORD_COMMAND+=(-f "${FORMAT}" "${VRECORD_OUTPUT}")
            RECORD_COMMAND+=("${EXTRAOUTPUTS[@]}")
            RECORD_COMMAND+=(-filter_complex "${AUDIOMAP}" "${AUDIO_CHANNEL_MAP[@]}" "${PIPE_OUTPUT[@]}")
        fi
        if [[ "${MEDIA_PLAYER_CHOICE}" = "mpv" ]] ; then
            _check_mpv
            PLAYER_COMMAND=(mpv "${MPVOPTS[@]}" --title="${WINDOW_NAME}" -)
        else
            _set_ffplay_options
            PLAYER_COMMAND=("${FFPLAY_BIN}" "${FFPLAY_OPTIONS[@]}")
        fi
    elif [[ "${DEVICE_INPUT_CHOICE}" = 1 ]] ; then
        if [[ "${OS_TYPE}" = "linux" ]] ; then
            VRECORD_STEPS="2"
            RECORD_COMMAND=("${FFMPEG_BIN}" -nostdin -nostats "${TIME_LIMIT[@]}" -f iec61883)
            RECORD_COMMAND+=(-i auto)
            RECORD_COMMAND+=(-map 0:v -c copy)
            RECORD_COMMAND+=(-f "${FORMAT}" "${VRECORD_OUTPUT}")
            RECORD_COMMAND+=(-map 0:v -f rawvideo -c copy -)
        else
            VRECORD_STEPS="3"
            RECORD_COMMAND=(avfctl)
            RECORD_COMMAND+=("${GRAB_INPUT[@]}")
            FF_RECORD_COMMAND=("${FFMPEG_BIN}" -nostdin -nostats "${TIME_LIMIT[@]}")
            FF_RECORD_COMMAND+=(-i -)
            FF_RECORD_COMMAND+=(-map 0:v -c copy)
            FF_RECORD_COMMAND+=(-f "${FORMAT}" "${VRECORD_OUTPUT}")
            FF_RECORD_COMMAND+=(-map 0:v -f rawvideo -c copy -)
        fi
        _set_ffplay_options
        PLAYER_COMMAND=("${FFPLAY_BIN}" "${FFPLAY_OPTIONS[@]}")
    elif [[ "${DEVICE_INPUT_CHOICE}" = 2 ]] ; then
        VRECORD_STEPS="2"
        RECORD_COMMAND=("${FFMPEG_BIN}")
        RECORD_COMMAND+=(-nostdin -nostats "${TIME_LIMIT[@]}" "${GRAB_INPUT[@]}")
        RECORD_COMMAND+=("${MIDDLEOPTIONS[@]}")
        RECORD_COMMAND+=(-f "${FORMAT}" -filter_complex "${AUDIOMAP}" "${AUDIO_CHANNEL_MAP[@]}" "${VRECORD_OUTPUT}")
        RECORD_COMMAND+=("${EXTRAOUTPUTS[@]}" -filter_complex "${AUDIOMAP}" "${AUDIO_CHANNEL_MAP[@]}" "${PIPE_OUTPUT[@]}")
        _set_ffplay_options
        PLAYER_COMMAND=("${FFPLAY_BIN}" -f lavfi "amovie='pipe\:0',${PLAYBACKFILTER}")
    else
        _report_unexpected_error DEVICE_INPUT_CHOICE
    fi
}

_get_decklink_inputs(){
    # get information on what input device options are available
    #unset DECKLINK_DEVICES
    if [[ "${DECKLINK_UTILITY_CHOICE}" == "bmdcapture" ]] ; then
        bmdcapture -h 2>&1 | grep "^->" | head -n 1 | sed 's/.*-> \(.*\) (.*/\1/'
    else
        "${FFMPEG_BIN}" -nostdin -v 0 -sources decklink | awk -F'[][]' '{print $2}' | grep -v "^$"
    fi
}

# decipher vrecord options as specified by user
_lookup_choice(){
    case "${2}" in
        "quit"|"Quit"|"QUIT"|"q"|"Q") _report -dt "Bye." ; exit ;;
    esac
    case "${1}" in
        # video inputs
        "Composite") VIDEO_INPUT="composite" ; BMD_VIDEO_INPUT="1" ;;
        "SDI")       VIDEO_INPUT="sdi";        BMD_VIDEO_INPUT="4" ;;
        "Component") VIDEO_INPUT="component";  BMD_VIDEO_INPUT="2" ;;
        "S-Video")   VIDEO_INPUT="s_video";    BMD_VIDEO_INPUT="6" ;;

        # audio inputs
        "Analog")                  AUDIO_INPUT="analog" ;   BMD_AUDIO_INPUT="1" ;;
        "SDI Embedded Audio")      AUDIO_INPUT="embedded" ; BMD_AUDIO_INPUT="2"  ;;
        "Digital Audio (AES/EBU)") AUDIO_INPUT="aes_ebu" ;  BMD_AUDIO_INPUT="3"  ;;

        # container
        "QuickTime")
            EXTENSION="mov"
            MIDDLEOPTIONS+=(-movflags write_colr)
            FORMAT="mov" ;;
        "Matroska")
            EXTENSION="mkv"
            FORMAT="matroska" ;;
        "AVI")
            EXTENSION="avi"
            FORMAT="avi" ;;
        "MXF")
            EXTENSION="mxf"
            FORMAT="mxf" ;;
        "MP4")
            EXTENSION="mp4"
            MIDDLEOPTIONS+=(-movflags write_colr)
            FORMAT="mp4" ;;

        # video codec
        "Uncompressed Video")
            if [[ "${PIXEL_FORMAT}" = "yuv422p10" ]] ; then
                VIDEOCODECNAME="Uncompressed 10-bit 4:2:2"
                MIDDLEOPTIONS+=(-c:v v210)
            elif [[ "${PIXEL_FORMAT}" = "uyvy422" ]] ; then
                VIDEOCODECNAME="Uncompressed 8-bit 4:2:2"
                MIDDLEOPTIONS+=(-c:v rawvideo -pix_fmt uyvy422 -tag:v 2vuy)
            fi ;;
        "FFV1 version 3")
            VIDEOCODECNAME="FFV1 version 3"
            MIDDLEOPTIONS+=(-c:v ffv1 -level 3 -g 1 -slices "${FFV1_SLICE_CHOICE}" -slicecrc 1)
            SUFFIX="_ffv1" ;;
        "JPEG2000")
            VIDEOCODECNAME="JPEG2000"
            MIDDLEOPTIONS+=(-c:v libopenjpeg)
            SUFFIX="_j2k" ;;
        "ProRes")
            VIDEOCODECNAME="Apple ProRes 422"
            MIDDLEOPTIONS+=(-c:v prores_ks -flags +ildct -profile:v 2)
            SUFFIX="_prores" ;;
        "ProRes (HQ)")
            VIDEOCODECNAME="Apple ProRes 422 HQ"
            MIDDLEOPTIONS+=(-c:v prores_ks -flags +ildct -profile:v 3)
            SUFFIX="_prores" ;;
        "h264")
            VIDEOCODECNAME="H.264"
            MIDDLEOPTIONS+=(-c:v libx264 -crf 18 -pix_fmt yuv420p)
            SUFFIX="" ;;
        "HuffYUV")
            VIDEOCODECNAME="HuffYUV"
            if [[ "${PIXEL_FORMAT}" = "yuv422p10" ]] ; then
                MIDDLEOPTIONS+=(-c:v ffvhuff -pix_fmt yuv422p10le -pred median -context 1)
            elif [[ "${PIXEL_FORMAT}" = "uyvy422" ]] ; then
                MIDDLEOPTIONS+=(-c:v ffvhuff -pix_fmt yuv422p -pred median -context 1)
            fi
            SUFFIX="_huff" ;;

        # video pixel format and bit depth
        "10 bit") PIXEL_FORMAT="yuv422p10" ; BMD_PIXEL_FORMAT="yuv10" ;;
        "8 bit")  PIXEL_FORMAT="uyvy422" ;   BMD_PIXEL_FORMAT="yuv8" ;;

        # audio codec
        "24-bit PCM")
            MIDDLEOPTIONS+=(-c:a pcm_s24le)
            AUDIO_EXT='wav' ;;
        "24-bit FLAC")
            MIDDLEOPTIONS+=(-c:a flac)
            MIDDLEOPTIONS+=(-sample_fmt s32)
            AUDIO_EXT='flac' ;;
        "AAC")
            MIDDLEOPTIONS+=(-c:a aac) ;;

        # audio mappings
        "2 Stereo Tracks (Channels 1 & 2 -> 1st Track Stereo, Channels 3 & 4 -> 2nd Track Stereo)")
            AUDIOMAP="[0:a:0]pan=stereo| c0=c0 | c1=${PHASE_VALUE}c1[stereo1];[0:a:0]pan=stereo| c0=c2 | c1=c3[stereo2]"
            AUDIO_CHANNEL_MAP+=(-map "[stereo1]")
            AUDIO_CHANNEL_MAP+=(-map "[stereo2]") ;;
        "1 Stereo Track (From Channels 1 & 2)")
            AUDIOMAP="[0:a:0]pan=stereo| c0=c0 | c1=${PHASE_VALUE}c1[stereo1]"
            AUDIO_CHANNEL_MAP+=(-map "[stereo1]") ;;
        "1 Stereo Track (From Channels 3 & 4)")
            AUDIOMAP="[0:a:0]pan=stereo| c0=c2 | c1=${PHASE_VALUE}c3[stereo1]"
            AUDIO_CHANNEL_MAP+=(-map "[stereo1]") ;;
        "Channel 1 -> 1st Track Mono, Channel 2 -> 2nd Track Mono")
            AUDIOMAP="[0:a:0]pan=mono| c0=c0[mono1];[0:a:0]pan=mono| c0=${PHASE_VALUE}c1[mono2]"
            AUDIO_CHANNEL_MAP+=(-map "[mono1]")
            AUDIO_CHANNEL_MAP+=(-map "[mono2]") ;;
        "Channel 2 -> 1st Track Mono, Channel 1 -> 2nd Track Mono")
            AUDIOMAP="[0:a:0]pan=mono| c0=${PHASE_VALUE}c1[mono1];[0:a:0]pan=mono| c0=c0[mono2]"
            AUDIO_CHANNEL_MAP+=(-map "[mono1]")
            AUDIO_CHANNEL_MAP+=(-map "[mono2]") ;;
        "Channel 1 -> Single Track Mono")
            AUDIOMAP="[0:a:0]pan=mono| c0=c0[mono1]"
            AUDIO_CHANNEL_MAP+=(-map "[mono1]") ;;
        "Channel 2 -> Single Track Mono")
            AUDIOMAP="[0:a:0]pan=mono| c0=c1[mono1]"
            AUDIO_CHANNEL_MAP+=(-map "[mono1]") ;;
        # Audio mode channel options
        "Mono")
            AUDIOMAP="[0:a:0]pan=mono| c0=c0[mono1]"
            PASSTHROUGH_MAP="pan=mono|c0=c0"
            AUDIO_CHANNEL_MAP+=(-map "[mono1]") ;;
        "Stereo")
            AUDIOMAP="[0:a:0]pan=stereo| c0=c0 | c1=c1[stereo1]"
            PASSTHROUGH_MAP="pan=stereo|c0=c0|c1=c1"
            AUDIO_CHANNEL_MAP+=(-map "[stereo1]") ;;
        # Audio mode sample rate options
        "96 kHz")
            S_RATE='-ar 96k'
            MIDDLEOPTIONS+=(${S_RATE}) ;;
        "48 kHz")
            S_RATE='-ar 48k'
            MIDDLEOPTIONS+=(${S_RATE}) ;;
        "44.1 kHz")
            S_RATE='-ar 44.1k'
            MIDDLEOPTIONS+=(${S_RATE}) ;;
        # timecode options
        "none"|"rp188vitc"|"rp188vitc2"|"rp188ltc"|"rp188any"|"vitc"|"vitc2"|"serial")
            TC_TYPE="${1}"
            EXTRAINPUTOPTIONS+=(-timecode_format "${TC_TYPE}")
            MIDDLEOPTIONS+=(-map_metadata 0:s:v:0)
            if [[ "${TC_TYPE}" != "none" ]] ; then
                if [[ "${RUNTYPE}" = "passthrough" ]] ; then
                TIMECODE_OVERLAY=",drawtext=fontfile=${DEFAULTFONT}:x=(w-text_w)*0.5:y=(h-text_h)*0.75:fontcolor=white:box=1:boxcolor=gray@0.7:boxborderw=4:fontsize=22:shadowx=1:shadowy=1:text=%{metadata\\\:timecode\\\:no ${TC_TYPE} timecode}"
                fi
                TC_TMP=$(_maketemp .timecode.txt)
                TC_WRITE=",metadata=mode=print:file=${TC_TMP}"
            fi
            declare TC_TYPE "${TC_TYPE}"
            ;;
        # video standard
        "NTSC")
            STANDARD="ntsc"
            if [[ "${DECKLINK_UTILITY_CHOICE}" == "bmdcapture" ]] ; then
                BMD_STANDARD="$(bmdcapture -h 2>&1 | grep "NTSC.*29.97" | cut -d: -f 1 | sed 's/ //g' | head -n 1)"
                RECORDINGFILTER+="setfield=bff,"
            fi
            DECKLINK_FPS="30000/1001"
            if [[ "${VIDEO_CODEC_CHOICE}" = "h264" ]] ; then
                RECORDINGFILTER+="crop=w=720:h=480:x=0:y=4,"
                MIDDLEOPTIONS+=(-x264opts bff)
            fi
            RECORDINGFILTER+="setsar=40/27,setdar=4/3"
            MIDDLEOPTIONS+=(-color_primaries smpte170m)
            MIDDLEOPTIONS+=(-color_trc bt709)
            MIDDLEOPTIONS+=(-colorspace smpte170m) ;;
        "PAL")
            STANDARD="pal "
            if [[ "${DECKLINK_UTILITY_CHOICE}" == "bmdcapture" ]] ; then
                BMD_STANDARD="$(bmdcapture -h 2>&1 | grep "PAL.*25" | cut -d: -f 1 | sed 's/ //g' | head -n 1)"
                RECORDINGFILTER+="setfield=tff,"
            fi
            DECKLINK_FPS="25000/1000"
            if [[ "${VIDEO_CODEC_CHOICE}" = "h264" ]] ; then
                MIDDLEOPTIONS+=(-x264opts tff)
            fi
            RECORDINGFILTER+="setsar=16/15,setdar=4/3"
            MIDDLEOPTIONS+=(-color_primaries bt470bg)
            MIDDLEOPTIONS+=(-color_trc bt709)
            MIDDLEOPTIONS+=(-colorspace bt470bg) ;;

        # playback views
        "Unfiltered") PLAYBACKFILTER="" ;;
        "Quality Control View (mpv)") MEDIA_PLAYER_CHOICE="mpv" ;;
        "Audio")
if [[ "${RUNTYPE}" = "record" ]] ; then
    AUDIO_SPLIT='4[c][e][f][out1],'
    WAVEFORM="[e]astats=metadata=1:reset=1,adrawgraph=m1=lavfi.astats.1.Min_level:m2=lavfi.astats.1.Max_level:size=700x160:bg=Black:fg1=0xFFFF0000:fg2=0xFFFF0000:slide=scroll:min=-32767:max=32767[wav1],\
    [f]astats=metadata=1:reset=1,adrawgraph=m1=lavfi.astats.2.Min_level:m2=lavfi.astats.2.Max_level:size=700x160:bg=Black:fg1=0xFF00FF00:fg2=0xFF00FF00:slide=scroll:min=-32767:max=32767[wav2]"
    AP_MAP='[c1][wav1][wav2]xstack=inputs=3:layout=0_0|0_h0|0_h0+h1[out0]'
else
    PRINT_PHASE=",drawtext=fontfile=${DEFAULTFONT}:box=1: text=Phase\\\: %{metadata\\\:lavfi.aphasemeter.phase}:x=135:y=380:fontcolor=black"
    PRINT_CHANNELS_1_2=",drawtext=fontfile=${DEFAULTFONT}: text=Ch.1/2:x=10: y=10:fontcolor=white"
    AUDIO_SPLIT='7[a][b][c][d][e][f][out1],'
    WAVEFORM="[e]astats=metadata=1:reset=1,adrawgraph=m1=lavfi.astats.1.Min_level:m2=lavfi.astats.1.Max_level:size=700x160:bg=Black:fg1=0xFFFF0000:fg2=0xFFFF0000:slide=scroll:min=-32767:max=32767[wav1],\
    [f]astats=metadata=1:reset=1,adrawgraph=m1=lavfi.astats.2.Min_level:m2=lavfi.astats.2.Max_level:size=700x160:bg=Black:fg1=0xFF00FF00:fg2=0xFF00FF00:slide=scroll:min=-32767:max=32767[wav2]"
    CHANNEL_PARAMS="[b]avectorscope=s=320x400${PRINT_CHANNELS_1_2}[b1],"
    AP_MAP='[a1][b1][x][wav1][wav2]xstack=inputs=5:layout=0_0|w0_0|0_h0|w0+w1_0|w0+w1_h3,fps=25[out0]'
    PHASE_LOCATION='x=135:y=380'
    SHOW_SPECTUM="[d]showspectrum=s=1155x200:fps=10:color=rainbow:saturation=2:legend=1[d1],"
    VOLUME_OVERLAY='[d1][c1]overlay=640:0:format=yuv444[x],'
    PHASE_MAP="[a]aphasemeter=video=0,adrawgraph=lavfi.aphasemeter.phase:max=1:min=-1:size=320x400:bg=black:fg1=0x99999999,drawbox=x=0:y=200:w=400:c=white:h=1${PRINT_PHASE}${PRINT_CHANNELS_1_2}[a1],"
fi
PLAYBACKFILTER="${PASSTHROUGH_MAP},asplit=${AUDIO_SPLIT}\
${PHASE_MAP}\
${CHANNEL_PARAMS}\
${WAVEFORM},\
[c]showvolume=t=0:h=28:w=700[c1],\
${SHOW_SPECTUM}\
${VOLUME_OVERLAY}\
${AP_MAP}" ;;
        "Audio + Video")
            VECTORSCOPE_FILTER="\
format=yuv422p,\
vectorscope=i=0.04:mode=color2:c=1:envelope=instant:graticule=green:flags=name,\
scale=400:400"
if [[ "${AUDIO_MAPPING_CHOICE}" = '2 Stereo Tracks (Channels 1 & 2 -> 1st Track Stereo, Channels 3 & 4 -> 2nd Track Stereo)' ]] ; then
    PRINT_PHASE=",drawtext=fontfile=${DEFAULTFONT}:box=1: text=Phase\\\: %{metadata\\\:lavfi.aphasemeter.phase}:x=135:y=1 80:fontcolor=black"
    PRINT_CHANNELS_1_2=",drawtext=fontfile=${DEFAULTFONT}: text=Ch.1/2:x=10: y=10:fontcolor=white"
    PRINT_CHANNELS_3_4=",drawtext=fontfile=${DEFAULTFONT}: text=Ch.3/4:x=10: y=10:fontcolor=white"
    AUDIO_SPLIT='7[a][aa][b][c][d][e][out1]'
    CHANNEL_PARAMS="[b]pan=stereo|c0=c0|c1=c1,avectorscope=s=320x400${PRINT_CHANNELS_1_2}[b1],[e]pan=stereo|c0=c2|c1=c3,avectorscope=s=320x400${PRINT_CHANNELS_3_4}[e1]"
    AP_MAP='[phase1][phase2][b1][e1][x][d1][TFIELD][BFIELD][vector]xstack=inputs=9:layout=0_0|0_h0|w0_0|w0+w2_0|w0+w2+w3_0|0_h0+h1|0_h0+h1+h5|w6_h0+h1+h5|w5_h0+h1,fps=25[out0]'
    PHASE_LOCATION='x=135:y=180'
    PHASE_MAP="[a]pan=stereo|c0=c0|c1=c1,aphasemeter=video=0,adrawgraph=lavfi.aphasemeter.phase:max=1:min=-1:size=400x200:bg=black:fg1=0x99999999,drawbox=x=0:y=100:w=400:c=white:h=1${PRINT_PHASE}${PRINT_CHANNELS_1_2}[phase1],\
    [aa]pan=stereo|c0=c2|c1=c3,aphasemeter=video=0,adrawgraph=lavfi.aphasemeter.phase:max=1:min=-1:size=400x200:bg=black:fg1=0x99999999,drawbox=x=0:y=100:w=400:c=white:h=1${PRINT_PHASE}${PRINT_CHANNELS_3_4}[phase2]"
    SPECTRUM_SIZE='755x265'
else
    PRINT_PHASE=",drawtext=fontfile=${DEFAULTFONT}:box=1: text=Phase\\\: %{metadata\\\:lavfi.aphasemeter.phase}:x=135:y=380:fontcolor=black"
    PRINT_CHANNELS_1_2=",drawtext=fontfile=${DEFAULTFONT}: text=Ch.1/2:x=10: y=10:fontcolor=white"
    AUDIO_SPLIT='5[a][b][c][d][out1]'
    CHANNEL_PARAMS="[b]pan=stereo|c0=c0|c1=c1,avectorscope=s=320x400${PRINT_CHANNELS_1_2}[b1]"
    AP_MAP='[a1][b1][x][d1][TFIELD][BFIELD][vector]xstack=inputs=7:layout=0_0|w0_0|w0+w1_0|0_h0+h4|0_h0|w4_h0|w0+w1+w2_0,fps=25[out0]'
    PHASE_LOCATION='x=135:y=380'
    PHASE_MAP="[a]aphasemeter=video=0,adrawgraph=lavfi.aphasemeter.phase:max=1:min=-1:size=320x400:bg=black:fg1=0x99999999,drawbox=x=0:y=200:w=400:c=white:h=1${PRINT_PHASE}${PRINT_CHANNELS_1_2}[a1]"
    SPECTRUM_SIZE='1155x200'
fi
PLAYBACKFILTER="streams=dv+da[vid][aud],[aud]asplit=${AUDIO_SPLIT},\
${PHASE_MAP},\
${CHANNEL_PARAMS},\
[c]showvolume=t=0:h=17:w=200[c1],\
[d]showspectrum=s=${SPECTRUM_SIZE}:fps=10:color=rainbow:saturation=2:legend=1[d1],\
[vid]split=4[vid1][vid2][vid3][vid4],[vid1]scale=400x400,signalstats=out=brng[vidscale],\
[vid2]field=top,${WAVEFORM_FILTER}[TFIELD],\
[vid3]field=bottom,${WAVEFORM_FILTER}[BFIELD],\
[vid4]${VECTORSCOPE_FILTER}[vector],\
[vidscale][c1]overlay=10:10[x],\
${AP_MAP}" ;;
        "Broadcast Range Visual")
            PLAYBACKFILTER="\
${PLAYBACK_FILTER_ADJUSTMENT}split=5[a][b][c][d][e];\
[a]copy${TIMECODE_OVERLAY}[a1];\
[b]field=top,${WAVEFORM_FILTER}[b1];\
[c]field=bottom,${WAVEFORM_FILTER}[c1];\
[d]${VECTORSCOPE_FILTER}[d1];\
[e]scale=512:ih,signalstats=out=brng[e1];\
[a1][b1][c1][e1][d1]xstack=inputs=5:layout=0_0|0_h0|0_h0+h1|w0_0|w0_h0" ;;
        "Full Range Visual")
            PLAYBACKFILTER="\
${PLAYBACK_FILTER_ADJUSTMENT}split=5[a][b][c][d][e];\
[a]copy${TIMECODE_OVERLAY}[a1];\
[b]field=top,${WAVEFORM_FILTER}[b1];\
[c]field=bottom,${WAVEFORM_FILTER}[c1];\
[d]${VECTORSCOPE_FILTER}[d1];\
[e]format=yuv444p,pseudocolor=if(between(1\,val\,amax)+between(val\,254\,amax)\,65\,-1):if(between(1\,val\,amax)+between(val\,254\,amax)\,100\,-1):if(between(1\,val\,amax)+between(val\,254\,amax)\,212\,-1),scale=512:ih[e1];\
[a1][b1][c1][e1][d1]xstack=inputs=5:layout=0_0|0_h0|0_h0+h1|w0_0|w0_h0" ;;
      "Visual + Numerical")
          PLAYBACKFILTER="\
${PLAYBACK_FILTER_ADJUSTMENT}split=6[a][b][c][d][e][f];\
[a]copy${TIMECODE_OVERLAY}[a1];\
[b]field=top,${WAVEFORM_FILTER}[b1];\
[c]field=bottom,${WAVEFORM_FILTER}[c1];\
[d]${VECTORSCOPE_FILTER}[d1];\
[e]signalstats=out=brng:stat=brng+vrep+tout,scale=512:ih,split[e1][e2];\
[e2]format=yuv422p,geq=lum=60:cb=128:cr=128,\
scale=180:ih+512,setsar=1/1,\
drawtext=fontcolor=white:fontsize=22:\
fontfile=${DEFAULTFONT}:textfile=${DRAWTEXT_TMP_1},\
drawtext=fontcolor=white:fontsize=17:\
fontfile=${DEFAULTFONT}:textfile=${DRAWTEXT_TMP_2},\
drawtext=fontcolor=white:fontsize=52:\
fontfile=${DEFAULTFONT}:textfile=${DRAWTEXT_TMP_3}[e3];\
[f]scale=iw+512+180:82,format=yuv422p,geq=lum=60:cb=128:cr=128,drawtext=fontcolor=white:fontsize=22:\
fontfile=${DEFAULTFONT}:textfile=${VRECORD_INPUT_TMP}:\
reload=1:y=82-th[f1];\
[e3][a1][b1][c1][e1][d1][f1]xstack=inputs=7:layout=0_0|w0_0|w0_h1|w0_h1+h2|w0+w1_0|w0+w1_h1|0_h0" ;;
      "Color Matrix")
          HUE=20
          SAT=0.3
          PLAYBACKFILTER="\
${PLAYBACK_FILTER_ADJUSTMENT}scale=iw/4:ih/4,\
split=9[x][hm][hp][sm][sp][hmsm][hmsp][hpsm][hpsp];\
[hm]hue=h=-${HUE}[hm1];\
[hp]hue=h=${HUE}[hp1];\
[sm]hue=s=1-${SAT}[sm1];\
[sp]hue=s=1+${SAT}[sp1];\
[hmsm]hue=h=-${HUE}:s=1-${SAT}[hmsm1];\
[hmsp]hue=h=-${HUE}:s=1+${SAT}[hmsp1];\
[hpsm]hue=h=${HUE}:s=1-${SAT}[hpsm1];\
[hpsp]hue=h=${HUE}:s=1+${SAT}[hpsp1];\
[hpsm1][hp1][hpsp1][sm1][x][sp1][hmsm1][hm1][hmsp1]xstack=inputs=9:layout=0_0|0_h0|0_h0+h1|w0_0|w0_h0|w0_h0+h1|w0+w1_0|w0+w1_h0|w0+w1_h0+h1" ;;
      "Bit Planes")
          if [[ "${PIXEL_FORMAT}" = "uyvy422" ]] ; then
              BITS=8
              SPLIT="8[b0][b1][b2][b3][b4][b5][b6][b7]"
              STACK="[b0c][b1c][b2c][b3c][b4c][b5c][b6c][b7c]hstack=8,format=yuv444p,drawgrid=w=iw/8:h=ih:t=2:c=green@0.5"
          elif [[ "${PIXEL_FORMAT}" = "yuv422p10" ]] ; then
              BITS=10
              SPLIT="10[b0][b1][b2][b3][b4][b5][b6][b7][b8][b9]"
              STACK="\
[b8]bitplanenoise=bitplane=2,crop=iw/10:ih:(iw/10)*8:0,lutyuv=u=(maxval/2):v=(maxval/2):y=bitand(val\\,pow(2\\,10-9))*pow(2\\,9),pad=iw:ih+64:0:64,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.0.2}:y=0:fontcolor=white:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.1.2}:y=20:fontcolor=white:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.2.2}:y=40:fontcolor=white:fontsize=20[b8c];\
[b9]bitplanenoise=bitplane=1,crop=iw/10:ih:(iw/10)*9:0,lutyuv=u=(maxval/2):v=(maxval/2):y=bitand(val\\,pow(2\\,10-10))*pow(2\\,10),pad=iw:ih+64:0:64,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.0.1}:y=0:fontcolor=silver:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.1.1}:y=20:fontcolor=silver:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.2.1}:y=40:fontcolor=silver:fontsize=20[b9c];\
[b0c][b1c][b2c][b3c][b4c][b5c][b6c][b7c][b8c][b9c]hstack=10,format=yuv444p,drawgrid=w=iw/10:h=ih:t=2:c=green@0.5"
          fi
          PLAYBACKFILTER="\
${PLAYBACK_FILTER_ADJUSTMENT}format=yuv420p10le|yuv422p10le|yuv444p10le|yuv440p10le,split=${SPLIT};\
[b0]bitplanenoise=bitplane=10,crop=iw/${BITS}:ih:(iw/${BITS})*0:0,lutyuv=u=(maxval/2):v=(maxval/2):y=bitand(val\\,pow(2\\,10-1))*pow(2\\,1),pad=iw:ih+64:0:64,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.0.10}:y=0:fontcolor=white:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.1.10}:y=20:fontcolor=white:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.2.10}:y=40:fontcolor=white:fontsize=20[b0c];\
[b1]bitplanenoise=bitplane=9,crop=iw/${BITS}:ih:(iw/${BITS})*1:0,lutyuv=u=(maxval/2):v=(maxval/2):y=bitand(val\\,pow(2\\,10-2))*pow(2\\,2),pad=iw:ih+64:0:64,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.0.9}:y=0:fontcolor=silver:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.1.9}:y=20:fontcolor=silver:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.2.9}:y=40:fontcolor=silver:fontsize=20[b1c];\
[b2]bitplanenoise=bitplane=8,crop=iw/${BITS}:ih:(iw/${BITS})*2:0,lutyuv=u=(maxval/2):v=(maxval/2):y=bitand(val\\,pow(2\\,10-3))*pow(2\\,3),pad=iw:ih+64:0:64,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.0.8}:y=0:fontcolor=white:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.1.8}:y=20:fontcolor=white:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.2.8}:y=40:fontcolor=white:fontsize=20[b2c];\
[b3]bitplanenoise=bitplane=7,crop=iw/${BITS}:ih:(iw/${BITS})*3:0,lutyuv=u=(maxval/2):v=(maxval/2):y=bitand(val\\,pow(2\\,10-4))*pow(2\\,4),pad=iw:ih+64:0:64,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.0.7}:y=0:fontcolor=silver:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.1.7}:y=20:fontcolor=silver:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.2.7}:y=40:fontcolor=silver:fontsize=20[b3c];\
[b4]bitplanenoise=bitplane=6,crop=iw/${BITS}:ih:(iw/${BITS})*4:0,lutyuv=u=(maxval/2):v=(maxval/2):y=bitand(val\\,pow(2\\,10-5))*pow(2\\,5),pad=iw:ih+64:0:64,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.0.6}:y=0:fontcolor=white:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.1.6}:y=20:fontcolor=white:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.2.6}:y=40:fontcolor=white:fontsize=20[b4c];\
[b5]bitplanenoise=bitplane=5,crop=iw/${BITS}:ih:(iw/${BITS})*5:0,lutyuv=u=(maxval/2):v=(maxval/2):y=bitand(val\\,pow(2\\,10-6))*pow(2\\,6),pad=iw:ih+64:0:64,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.0.5}:y=0:fontcolor=silver:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.1.5}:y=20:fontcolor=silver:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.2.5}:y=40:fontcolor=silver:fontsize=20[b5c];\
[b6]bitplanenoise=bitplane=4,crop=iw/${BITS}:ih:(iw/${BITS})*6:0,lutyuv=u=(maxval/2):v=(maxval/2):y=bitand(val\\,pow(2\\,10-7))*pow(2\\,7),pad=iw:ih+64:0:64,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.0.4}:y=0:fontcolor=white:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.1.4}:y=20:fontcolor=white:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.2.4}:y=40:fontcolor=white:fontsize=20[b6c];\
[b7]bitplanenoise=bitplane=3,crop=iw/${BITS}:ih:(iw/${BITS})*7:0,lutyuv=u=(maxval/2):v=(maxval/2):y=bitand(val\\,pow(2\\,10-8))*pow(2\\,8),pad=iw:ih+64:0:64,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.0.3}:y=0:fontcolor=silver:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.1.3}:y=20:fontcolor=silver:fontsize=20,drawtext=fontfile=${DEFAULTFONT}:text=%{metadata\\\:lavfi.bitplanenoise.2.3}:y=40:fontcolor=silver:fontsize=20[b7c];\
${STACK}" ;;

        # others
        "Yes"|"Yes, after recording"|"Yes, concurrent with recording"|"No") ;;
        *)           _report -w "Error: ${1} is not a valid option." ; return 1 ;;
    esac
}

_review_option(){
    unset NO_LOOKUP
    OPTIND=1
    while getopts "n" opt ; do
        case "${opt}" in
            n) NO_LOOKUP="Y" #also the SELECTED value to be used as-is rather than lookup what it means
        esac
    done
    shift "$((OPTIND-1))"
    VALUE_NAME="${1}"
    SELECTED="${!1}"
    shift
    CHOICES=("${@}")
    if [[ ! " ${CHOICES[@]} " =~ " ${SELECTED} " ]]; then
        _report -w "The configuration file uses an invalid value of ${SELECTED} for ${VALUE_NAME}. Valid values are: ${CHOICES[*]}. Please restart ${SCRIPTNAME} in edit mode (${SCRIPTNAME} -e) or update the configuration file at ${CONFIG_FILE}."
        exit 2
    fi
    if [[ "${SELECTED}" ]] ; then
        if [[ "${NO_LOOKUP}" != "Y" ]] ; then
          _lookup_choice "${SELECTED}"
        fi
    else
        _report -w "The option for ${VALUE_NAME} is not set. Please restart ${SCRIPTNAME} in edit mode (${SCRIPTNAME} -e) or update the configuration file at ${CONFIG_FILE}."
        exit 3
    fi
    LOG_OF_OPTIONS+="${VALUE_NAME}: ${SELECTED}\n"
}

_review_all_options(){
    if [[ "${INVERT_PHASE}" = 'true' ]] ; then
        PHASE_VALUE="-1*"
    fi
    if [[ "${DEVICE_INPUT_CHOICE}" = "0" ]] ; then
        _review_option -n "DECKLINK_UTILITY_CHOICE" "${DECKLINK_UTILITIES[@]}"
        _review_option "VIDEO_INPUT_CHOICE" "${VIDEO_INPUT_OPTIONS[@]}"
        _review_option "AUDIO_INPUT_CHOICE" "${AUDIO_INPUT_OPTIONS[@]}"
        _review_option "VIDEO_BIT_DEPTH_CHOICE" "${VIDEO_BITDEPTH_OPTIONS[@]}"
        _review_option "AUDIO_MAPPING_CHOICE" "${CHANNEL_MAPPING_OPTIONS[@]}"
        if [[ -z "${ALT_INPUT}" ]] ; then
            _review_option "TIMECODE_CHOICE" "${TIMECODE_OPTIONS[@]}"
        fi
        _review_option "STANDARD_CHOICE" "${STANDARD_OPTIONS[@]}"
    elif [[ "${DEVICE_INPUT_CHOICE}" = "1" ]] ; then
        _review_option -n "AVFCTL_INPUT_CHOICE" "${AVFCTL_DEVICES[@]}"
    elif [[ "${DEVICE_INPUT_CHOICE}" = "2" ]] ; then
        _review_option -n "AUDIO_DEV_CHOICE" "${AUDIO_DEVICES[@]}"
    fi
    if [[ "${CORE_COUNT}" -le 2 && "${RUNTYPE}" = "record" ]] ; then
        _report -w "Since this computer has only ${CORE_COUNT} cores, the playback will display only half of the frames to reduce CPU. This will not impact the recording."
        PLAYBACK_FILTER_ADJUSTMENT="select=not(mod(n\,2)),"
    fi
    if [[ "${RUNTYPE}" = "passthrough" ]] && [[ -n "${PLAYBACKVIEW_CHOICE_PASS}" ]] && [[ "${PLAYBACKVIEW_CHOICE_PASS}" != "Unselected" ]] ; then
        _review_option "PLAYBACKVIEW_CHOICE_PASS" "${PLAYBACKVIEW_PASS_OPTIONS[@]}"
    else
        _review_option "PLAYBACKVIEW_CHOICE" "${PLAYBACKVIEW_OPTIONS[@]}"
    fi
    if [[ "${DEVICE_INPUT_CHOICE}" = 0 ]] ; then
        if [[ "${PLAYBACKVIEW_CHOICE}" = "Full Range Visual" ]] ; then
            MIDDLEOPTIONS+=(-color_range jpeg)
        else
            MIDDLEOPTIONS+=(-color_range mpeg)
        fi
        MIDDLEOPTIONS+=(-metadata creation_time=now)
    fi
    MIDDLEOPTIONS+=(${EXTRAOUTPUTOPTIONS[@]})
    if [[ "${DEVICE_INPUT_CHOICE}" = "2" ]] ; then
        _review_option "AUDIO_MODE_CODEC_CHOICE" "${AUDIO_CODEC_OPTIONS[@]}"
        _review_option "AUDIO_CHANNEL_CHOICE" "${AUDIO_CHANNEL_CHOICE_OPTIONS[@]}"
        _review_option "AUDIO_MODE_SR_CHOICE" "${AUDIO_MODE_SR_CHOICE_OPTIONS[@]}"
        PLAYBACKVIEW_CHOICE_PASS="Audio"
        PLAYBACKVIEW_CHOICE="Audio"
        _lookup_choice "Audio"
    fi

    # set up input and playback
    _set_up_drawtext
    _set_ffmpeg_loglevel(){
        if [[ "$VERBOSE" = "true" ]] ; then
            GRAB_INPUT+=(-loglevel debug)
            _report -wt "When running vrecord in verbose mode, avoid using Visual + Numerical option."
        else
            GRAB_INPUT+=(-loglevel info)
        fi
    }
    unset GRAB_INPUT
    if [[ -n "${ALT_INPUT}" ]] ; then
        GRAB_INPUT+=("${EXTRAINPUTOPTIONS[@]}")
        GRAB_INPUT+=(-i "${ALT_INPUT}")
    elif [[ "${DEVICE_INPUT_CHOICE}" = 0 ]] ; then
        if [[ "${DECKLINK_UTILITY_CHOICE}" == "bmdcapture" ]] ; then
            GRAB_INPUT+=(-A "${BMD_AUDIO_INPUT}")
            GRAB_INPUT+=(-V "${BMD_VIDEO_INPUT}")
            GRAB_INPUT+=(-m "${BMD_STANDARD}")
            GRAB_INPUT+=(-c 8)
            GRAB_INPUT+=(-s 32)
            GRAB_INPUT+=(-p "${BMD_PIXEL_FORMAT}")
            GRAB_INPUT+=(-F "matroska")
            GRAB_INPUT+=(-d "0")
            GRAB_INPUT+=(-f pipe:1)
        else
            _set_ffmpeg_loglevel
            GRAB_INPUT+=(-f decklink)
            GRAB_INPUT+=(-draw_bars 0)
            GRAB_INPUT+=(-audio_input "${AUDIO_INPUT}")
            GRAB_INPUT+=(-video_input "${VIDEO_INPUT}")
            GRAB_INPUT+=(-format_code "${STANDARD}")
            GRAB_INPUT+=(-channels 8)
            GRAB_INPUT+=(-audio_depth 32)
            GRAB_INPUT+=(-raw_format "${PIXEL_FORMAT}")
            GRAB_INPUT+=("${EXTRAINPUTOPTIONS[@]}")
            GRAB_INPUT+=(-i "${DECKLINK_INPUT_CHOICE}")
        fi
    elif [[ "${DEVICE_INPUT_CHOICE}" = 1 ]] ; then
        AVFCTL_INPUT_INDEX="$(echo "${AVFCTL_INPUT_CHOICE}" | cut -c 2)"
        GRAB_INPUT+=(-device "${AVFCTL_INPUT_INDEX}")
        GRAB_INPUT+=(-cmd capture)
        GRAB_INPUT+=(-)
        MIDDLEOPTIONS+=(-c copy -map 0)
        EXTENSION="dv"
        FORMAT="rawvideo"
    elif [[ "${DEVICE_INPUT_CHOICE}" = 2 ]] ; then
        _set_ffmpeg_loglevel
        #Mac Options
        #Linux Options
        if [[ "${OS_TYPE}" = "linux" ]] ; then
            _get_audio_dev_num
            GRAB_INPUT+=(-f alsa)
            GRAB_INPUT+=(-acodec pcm_s32le -ac 2)
            GRAB_INPUT+=(${S_RATE})
            GRAB_INPUT+=(-i hw:"${AUDIO_DEV_NUM}")
            EXTENSION="${AUDIO_EXT}"
            FORMAT="${AUDIO_EXT}"
        elif [[ "${OS_TYPE}" = "macOS" ]] ; then
            GRAB_INPUT+=(-f avfoundation)
            GRAB_INPUT+=(-i "none:${AUDIO_DEV_CHOICE}")
            EXTENSION="${AUDIO_EXT}"
            FORMAT="${AUDIO_EXT}"
        fi
    else
        _report "Input unknown"
        exit 1
    fi

    if [[ "${DEVICE_INPUT_CHOICE}" = 0 ]] ; then
        PIPE_OUTPUT=(-c copy)
        PIPE_OUTPUT+=(-c:a pcm_s24le)
        PIPE_OUTPUT+=(-map 0)
        PIPE_OUTPUT+=(-f matroska)
        PIPE_OUTPUT+=(-write_crc32 0)
        PIPE_OUTPUT+=(-live true)
        PIPE_OUTPUT+=(-)
        WINDOW_NAME="mode:${RUNTYPE} - video:'${VIDEO_INPUT}' audio:'${AUDIO_INPUT}' - to end recording press q, esc, or close video window"
    elif [[ "${DEVICE_INPUT_CHOICE}" = 1 ]] ; then
        PIPE_OUTPUT=(-c copy)
        PIPE_OUTPUT+=(-map 0)
        PIPE_OUTPUT+=(-f rawvideo)
        PIPE_OUTPUT+=(-)
        WINDOW_NAME="mode:${RUNTYPE} - input:'${AVFCTL_INPUT_CHOICE}' - to end recording press q, esc, or close video window"
    elif [[ "${DEVICE_INPUT_CHOICE}" = 2 ]] ; then
        PIPE_OUTPUT+=(-c:a pcm_s16le -ar 48k)
        PIPE_OUTPUT+=(-f wav)
        PIPE_OUTPUT+=(-)
    else
        _report "Input unknown"
        exit 1
    fi
}

_frames_to_hhmmss(){
    H=$(echo "${i} / (60 * 60 * ${DECKLINK_FPS})" | bc)
    M=$(echo "(${i} - (${H}*60 * 60 * ${DECKLINK_FPS})) / (60 * ${DECKLINK_FPS})" | bc)
    S="$(echo "scale=3;(${i} - (${H}*60 * 60 * ${DECKLINK_FPS})-($M*60*${DECKLINK_FPS})) / (${DECKLINK_FPS})" | bc)"
    Ss=$(echo "${S}" | cut -d. -f1 | bc)
    Sm=$(echo "${S}" | cut -d. -f2 | bc)
    printf "%02d:%02d:%02d.%03d\n" "${H}" "${M}" "${Ss}" "${Sm}"
}
